<script lang="ts">
  import { supabase } from '$lib/supabaseClient';
  import { onMount, tick } from 'svelte';
  import { writable } from 'svelte/store';
  import { fade } from 'svelte/transition';
  import { createEventDispatcher } from 'svelte';
  import SignTimecardModal from '$lib/components/SignTimecardModal.svelte';
  import { jsPDF } from 'jspdf'; // ✅ PDF generation

  const dispatch = createEventDispatcher();

  export let userId: string;
  export let clientPeriodStart: string;
  export let viewAsEmployee: boolean = false;

  let allPunches = [];
  let currentPeriodPunches = [];
  export let dayBlocks = [];

  let summaries = [];
  let splitShiftAwards = writable({});
  let showPunchPreview = true;

  let periodOffset = 0;
  let currentPeriodStart;
  let selectedDay = null;
  let timecardReady = false;
  let showSignModal = false;
  let alreadySigned = false;

  let userName = "";
  let companyName = "";

  const hourLabels = Array.from({ length: 24 }, (_, i) => i);

  

  onMount(async () => {
    if (clientPeriodStart) {
      setPeriodStart();
      await tick();
      await fetchPunches();
      await tick();
      await updateCurrentPeriod();
      await fetchUserName();
      await fetchCompanyName();
    }
  });



async function fetchCompanyName() {
  try {
    // Fetch the user details from the 'users' table first to get the associated client_id
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('client_id')
      .eq('id', userId) // Fetching user record by userId
      .single();

    if (userError) {
      throw new Error(`Error fetching user details: ${userError.message}`);
    }

    const clientId = userData?.client_id;
    if (!clientId) {
      throw new Error('No client_id associated with this user.');
    }

    // Use the client_id to fetch the company name from the 'clients' table
    const { data: clientData, error: clientError } = await supabase
      .from('clients')
      .select('legal_name')
      .eq('id', clientId) // Using the client_id fetched from the user
      .single();

    if (clientError) {
      throw new Error(`Error fetching company name: ${clientError.message}`);
    }

    companyName = clientData?.legal_name || "Unknown Company"; // Assign company name
  } catch (error) {
    console.error('Error fetching company name:', error);
    companyName = "Unknown Company"; // Default fallback
  }
}


  async function fetchUserName() {
    const { data, error } = await supabase
      .from('users')
      .select('name')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('Error fetching user name:', error);
    } else {
      userName = data?.name || "Unknown Employee"; // Assign user name
    }
  }

  function setPeriodStart() {
    if (!clientPeriodStart) return;
    const base = new Date(clientPeriodStart);
    currentPeriodStart = new Date(base);
    currentPeriodStart.setDate(base.getDate() + (periodOffset * 14));
  }

  async function fetchPunches() {
    timecardReady = false;
    const { data, error } = await supabase
      .from('punches')
      .select('date, time, user_id')
      .eq('user_id', userId)
      .order('date', { ascending: true })
      .order('time', { ascending: true });

    allPunches = data || [];
    await updateCurrentPeriod();
    await new Promise(resolve => setTimeout(resolve, 500));
    timecardReady = true;
  }

  async function shiftPeriod(direction: number) {
    periodOffset += direction;
    setPeriodStart();
    selectedDay = null;
    await updateCurrentPeriod();

    if (currentPeriodStart) {
      dispatch('periodChange', { newPeriodStart: currentPeriodStart.toISOString().split('T')[0] });
    }
  }

  async function updateCurrentPeriod() {
    if (!currentPeriodStart) return;
    const start = new Date(currentPeriodStart);
    const end = new Date(start);
    end.setDate(start.getDate() + 13);

    currentPeriodPunches = allPunches.filter(p => {
      const punchDate = new Date(p.date);
      return punchDate >= start && punchDate <= end;
    });

    await tick();
    buildDayBlocks();
    await checkIfAlreadySigned();
  }

  async function checkIfAlreadySigned() {
    const periodEnd = new Date(currentPeriodStart);
    periodEnd.setDate(periodEnd.getDate() + 13);
    const periodEndDate = periodEnd.toISOString().split('T')[0];

    const { data, error } = await supabase
      .from('signed_timecards')
      .select('id')
      .eq('user_id', userId)
      .eq('period_end_date', periodEndDate)
      .maybeSingle();

    alreadySigned = !!data;
  }

  function buildDayBlocks() {
    dayBlocks = getPeriodDays().map(day => {
      const todayPunches = currentPeriodPunches
        .filter(p => p.date === formatDateLocal(day))
        .map(p => timeToMinutes(p.time))
        .sort((a, b) => a - b);

      const blocks = [];
      let i = 0;
      while (i + 1 < todayPunches.length) {
        const start = todayPunches[i];
        const end = todayPunches[i + 1];
        blocks.push({ type: 'work', start, end });
        i += 2;

        if (i < todayPunches.length) {
          const gap = todayPunches[i] - end;
          if (gap <= 25) {
            blocks.push({ type: 'break', start: end, end: todayPunches[i] });
          } else if (gap <= 60) {
            blocks.push({ type: 'lunch', start: end, end: todayPunches[i] });
          } else {
            blocks.push({ type: 'split', start: end, end: todayPunches[i] });
          }
        }
      }

      if (todayPunches.length % 2 !== 0) {
        blocks.push({ type: 'missing', start: todayPunches[todayPunches.length - 1], end: 1440 });
      }

      return { date: formatDateLocal(day), blocks };
    });

    calculateSummaries();
  }

  function calculateSummaries() {
    summaries = [];
    for (let weekStart of [0, 7]) {
      let weeklyRegularMins = 0;
      let workedDays = [];

      for (let i = 0; i < 7; i++) {
        const dayIndex = weekStart + i;
        const day = new Date(currentPeriodStart);
        day.setDate(day.getDate() + dayIndex);
        const dateStr = formatDateLocal(day);

        const blocks = dayBlocks.find(d => d.date === dateStr)?.blocks || [];
        const workBlocks = blocks.filter(b => b.type === 'work');
        const totalWorked = workBlocks.reduce((sum, b) => sum + (b.end - b.start), 0);

        workedDays.push(totalWorked > 0);
      }

      const fullWeekWorked = workedDays.every(w => w);

      for (let i = 0; i < 7; i++) {
        const dayIndex = weekStart + i;
        const day = new Date(currentPeriodStart);
        day.setDate(day.getDate() + dayIndex);
        const dateStr = formatDateLocal(day);

        const blocks = dayBlocks.find(d => d.date === dateStr)?.blocks || [];
        const workBlocks = blocks.filter(b => b.type === 'work');
        let totalWorked = workBlocks.reduce((sum, b) => sum + (b.end - b.start), 0);

        const summary = {
          date: dateStr,
          regular: 0,
          overtime: 0,
          doubletime: 0,
          missingLunch: false,
          splitShift: false,
          total: totalWorked
        };

        const breaks = [];
        for (let j = 1; j < workBlocks.length; j++) {
          const prev = workBlocks[j - 1].end;
          const curr = workBlocks[j].start;
          breaks.push(curr - prev);
        }

        const lunch1 = breaks.some(b => b >= 30 && b <= 60);
        const lunch2 = breaks.filter(b => b >= 30).length >= 2;

        if (totalWorked > 300 && !lunch1) summary.missingLunch = true;
        if (totalWorked > 600 && !lunch2) summary.missingLunch = true;
        if (blocks.some(b => b.type === 'split')) summary.splitShift = true;

        let dailyRegular = 0, dailyOvertime = 0, dailyDoubletime = 0;
        if (totalWorked > 720) {
          dailyDoubletime = totalWorked - 720;
          dailyOvertime = 240;
          dailyRegular = 480;
        } else if (totalWorked > 480) {
          dailyOvertime = totalWorked - 480;
          dailyRegular = 480;
        } else {
          dailyRegular = totalWorked;
        }

        if (i === 6 && fullWeekWorked) {
          dailyOvertime += dailyRegular;
          dailyRegular = 0;
        }

        if (weeklyRegularMins + dailyRegular > 2400) {
          const overflow = (weeklyRegularMins + dailyRegular) - 2400;
          dailyRegular -= overflow;
          dailyOvertime += overflow;
        }

        weeklyRegularMins += dailyRegular;

        summary.regular = dailyRegular;
        summary.overtime = dailyOvertime;
        summary.doubletime = dailyDoubletime;

        summaries.push(summary);
      }
    }
  }

  function getPeriodDays() {
    if (!currentPeriodStart) return [];
    const days = [];
    const start = new Date(currentPeriodStart);
    for (let i = 0; i < 14; i++) {
      const day = new Date(start);
      day.setDate(start.getDate() + i);
      days.push(day);
    }
    return days;
  }

  function formatDateLocal(date: Date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }

  function formatShortDate(date: Date) {
    return date.toLocaleDateString(undefined, { month: '2-digit', day: '2-digit' });
  }

  function formatHours(minutes: number) {
    return minutes > 0 ? `${Math.floor(minutes / 60)}h ${minutes % 60}m` : '—';
  }

  function timeToMinutes(str: string) {
    const [h, m] = str.split(':').map(Number);
    return h * 60 + m;
  }

  function awardSplitShift(date: string, value: boolean) {
    splitShiftAwards.update(current => ({ ...current, [date]: value }));
  }

  async function saveSignature(signatureDataUrl: string) {
    const periodEnd = new Date(currentPeriodStart);
    periodEnd.setDate(periodEnd.getDate() + 13);
    const periodEndDate = periodEnd.toISOString().split('T')[0];

    const { error } = await supabase.from('signed_timecards').insert([
      { user_id: userId, signature_image: signatureDataUrl, period_end_date: periodEndDate }
    ]);

    if (!error) {
      await generateAndUploadPdf(signatureDataUrl, periodEndDate);
      await checkIfAlreadySigned();
    } else {
      console.error('Error saving signature:', error);
    }
  }

  function handleSignatureSave(event) {
    saveSignature(event.detail.signature);
    showSignModal = false;
  }

  function handleSignatureCancel() {
    showSignModal = false;
  }

  async function generateAndUploadPdf(signatureDataUrl: string, periodEndDate: string) {const doc = new jsPDF();

// Title
doc.setFontSize(18);
doc.text('Time Card Report', 20, 20);

// Company Name
doc.setFontSize(12);
doc.text(`Company: ${companyName}`, 20, 30);

// Period and Employee Info
doc.setFontSize(10);
doc.text(`Period: ${formatDateLocal(currentPeriodStart)} to ${periodEndDate}`, 20, 40);
doc.text(`Employee: ${userName}`, 20, 50);

// Add a line separator
doc.setLineWidth(0.5);
doc.line(20, 55, 190, 55);

// Prepare table data (inline punches per row)
// Prepare table data (inline punches per row)
const tableBody = dayBlocks.map(day => {
  const punchesText = day.blocks.map(block => {
    const startHour = Math.floor(block.start / 60);
    const startMin = String(block.start % 60).padStart(2, '0');
    const endHour = Math.floor(block.end / 60);
    const endMin = String(block.end % 60).padStart(2, '0');
    return `${block.type}: ${startHour}:${startMin} to ${endHour}:${endMin}`;
  }).join(', '); // 👉 inline with commas

  return [day.date, punchesText];
});



// Insert the table
doc.autoTable({
  startY: 60,
  head: [['Date', 'Worked Hours']],
  body: tableBody,
  theme: 'grid',
  headStyles: {
    fillColor: [30, 64, 175],
    textColor: 255,
    fontSize: 10,
    halign: 'center'
  },
  bodyStyles: {
    fontSize: 8,
    valign: 'top'
  },
  styles: {
    cellPadding: 3,
    overflow: 'linebreak'
  },
  columnStyles: {
    0: { cellWidth: 40 }, // Date column
    1: { cellWidth: 120 } // Worked Hours column
  }
});

// Certification Text
let finalY = doc.lastAutoTable.finalY + 10;

doc.setFontSize(10);
doc.text('Certification:', 20, finalY);
finalY += 6;
doc.setFontSize(8);
doc.text(
  'I certify that the hours recorded in this timecard represent an accurate record of my hours worked and that I took the required meal periods as provided by law or have otherwise reported any missed, late, or interrupted meal periods.',
  20, finalY,
  { maxWidth: 170 }
);

// Signature Image
finalY += 30;
doc.addImage(signatureDataUrl, 'PNG', 20, finalY, 60, 20); // Adjust as needed

// Signed At
const signDate = new Date();
const signTime = `Signed at: ${signDate.toLocaleString()}`;

finalY += 25;
doc.setFontSize(8);
doc.text(signTime, 20, finalY + 10);

// Generate PDF Blob and Upload
const pdfBlob = doc.output('blob');
const storagePath = `${userId}/${periodEndDate}.pdf`;

const { error: storageError } = await supabase.storage.from('timecards-pdf').upload(
  storagePath,
  pdfBlob,
  { contentType: 'application/pdf', upsert: true }
);

if (storageError) {
  console.error('Failed to upload PDF', storageError);
  return;
}
  }






  async function downloadSignedPdf() {
    const periodEnd = new Date(currentPeriodStart);
    periodEnd.setDate(periodEnd.getDate() + 13);
    const periodEndDate = periodEnd.toISOString().split('T')[0];
    const filePath = `${userId}/${periodEndDate}.pdf`;

    const { data, error } = await supabase.storage.from('timecards-pdf').download(filePath);

    if (error) {
      console.error('Failed to download PDF', error);
      alert('Could not download the signed timecard.');
      return;
    }

    const url = URL.createObjectURL(data);
    const link = document.createElement('a');
    link.href = url;
    link.download = `Timecard_${periodEndDate}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
</script>


  
  
<!-- Sign Timecard Button -->
{#if viewAsEmployee && !alreadySigned}
  <div class="flex justify-center mb-4">
    <button
      class="w-2/3 md:w-1/2 p-4 rounded-md bg-purple-600 hover:bg-purple-700 text-white font-semibold"
      on:click={() => showSignModal = true}
    >
      ✍️ Sign Timecard
    </button>
  </div>
  {:else if viewAsEmployee && alreadySigned}
  <div class="flex flex-col items-center mb-4 space-y-3">
    <span class="text-green-600 font-semibold">✅ Timecard Signed</span>

    <button
      class="w-2/3 md:w-1/2 p-4 rounded-md bg-green-600 hover:bg-green-700 text-white font-semibold"
      on:click={downloadSignedPdf}
    >
      📄 Download Signed Timecard
    </button>
  </div>
{/if}

<!-- Navigation Buttons -->
<div class="text-center mb-4 flex justify-center items-center gap-2 flex-wrap">
  {#if currentPeriodStart}
    <button on:click={() => shiftPeriod(-1)} class="bg-blue-600 text-white px-3 py-1 rounded">⬅</button>
    <button on:click={() => shiftPeriod(1)} class="bg-blue-600 text-white px-3 py-1 rounded">➡</button>
    <strong class="text-lg">Period starting: {currentPeriodStart.toLocaleDateString()}</strong>
  {/if}
</div>

<!-- Punches and Day Blocks Preview -->
<div class="w-full max-w-7xl mb-6" in:fade={{ duration: 300 }}>
  <button
    class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded mb-2"
    on:click={() => showPunchPreview = !showPunchPreview}
  >
    {showPunchPreview ? 'Hide Previews' : 'Show Previews'}
  </button>

  
</div>

<!-- Timecard Table -->
{#if timecardReady && currentPeriodStart}
  <div in:fade={{ duration: 300 }}>
    <!-- Timecard Grid -->
    <div class="desktop-timecard timecard-scroll mt-6">
      <div class="timecard-grid border border-gray-300 rounded-md overflow-hidden">
        <div class="hour-col">
          <div class="blank"></div>
          <div class="blank"></div>
          {#each hourLabels as hour}
            <div class="hour-label">
              {hour === 0 ? '12 AM' : hour < 12 ? `${hour} AM` : hour === 12 ? '12 PM' : `${hour - 12} PM`}
            </div>
          {/each}
        </div>

        {#each getPeriodDays() as day}
          {@const blockForDay = dayBlocks.find(d => d.date === formatDateLocal(day))}
          <div class="day-col">
            <div class="date-header">{formatShortDate(day)}</div>
            <div class="totals-row">
              {#if blockForDay && blockForDay.blocks.some(b => b.type === 'missing')}
                <span class="text-red-600 font-bold">Missing</span>
              {:else if blockForDay}
                {formatHours(blockForDay.blocks.filter(b => b.type === 'work').reduce((s, b) => s + (b.end - b.start), 0))}
              {:else}
                0h 0m
              {/if}
            </div>
            <div class="bar-area">
              {#if blockForDay}
                {#each blockForDay.blocks as block}
                  <div
                    class={`bar-segment ${block.type}`}
                    style="top: {(block.start / 1440) * 100}%; height: {((block.end - block.start) / 1440) * 100}%"
                    title={block.type === 'lunch' ? '🍴 Lunch' : block.type}
                  ></div>
                {/each}
              {/if}
            </div>
          </div>
        {/each}
      </div>
    </div>

    <!-- Summary Grid -->
    {#if summaries.length > 0}
      <div class="desktop-timecard timecard-scroll mt-6">
        <div class="summary-grid">
          <div class="label-cell font-semibold text-blue-800">Total</div>
          {#each summaries as s}
            <div class="value-cell font-semibold">{formatHours(s.total)}</div>
          {/each}

          <div class="label-cell">Regular</div>
          {#each summaries as s}
            <div class="value-cell">{formatHours(s.regular)}</div>
          {/each}

          <div class="label-cell">Overtime</div>
          {#each summaries as s}
            <div class="value-cell text-yellow-600">{formatHours(s.overtime)}</div>
          {/each}

          <div class="label-cell">Double Time</div>
          {#each summaries as s}
            <div class="value-cell text-red-600">{formatHours(s.doubletime)}</div>
          {/each}

          <div class="label-cell">Missing Lunch</div>
          {#each summaries as s}
            <div class="value-cell">{s.missingLunch ? '❌' : '—'}</div>
          {/each}

          <div class="label-cell">Split Shift</div>
          {#each summaries as s, i}
            <div class="value-cell">
              {#if s.splitShift}
              {#if userRole !== 'Employee'} <!-- Only show award options if the user is NOT an employee -->
    <div class="flex flex-col items-center justify-center text-xs">
      <label class="inline-flex items-center gap-1">
        <input type="radio" name={`award-${i}`} value="yes" on:change={() => awardSplitShift(s.date, true)} />✅
      </label>
      <label class="inline-flex items-center gap-1">
        <input type="radio" name={`award-${i}`} value="no" on:change={() => awardSplitShift(s.date, false)} />❌
      </label>
    </div>
  {/if}
{:else}
                —
              {/if}
            </div>
          {/each}
        </div>
      </div>
    {/if}
  </div>
{/if}

<!-- Sign Modal -->
{#if showSignModal}
  <SignTimecardModal
    employeeName={userName}
    periodEndDate={(new Date(currentPeriodStart.getTime() + 13 * 86400000)).toLocaleDateString()}
    on:save={handleSignatureSave}
    on:cancel={handleSignatureCancel}
  />
{/if}

<style>
  /* Timecard Table Layout */
  .timecard-scroll {
    overflow-x: auto;
  }

  .timecard-grid {
    display: grid;
    grid-template-columns: 60px repeat(14, minmax(60px, 1fr));
    grid-template-rows: auto auto 1fr;
    height: 645px;
    min-width: 1000px;
  }

  .hour-col {
    display: flex;
    flex-direction: column;
  }

  .hour-label {
    font-size: 0.65rem;
    text-align: right;
    padding: 0.25rem 4px;
    color: #666;
    background: #f9fafb;
    border-bottom: 1px solid #eee;
  }

  .day-col {
    display: flex;
    flex-direction: column;
    border-left: 1px solid #ddd;
    position: relative;
  }

  .date-header {
    text-align: center;
    font-size: 0.75rem;
    font-weight: bold;
    background: #e0f2ff;
    padding: 0.4rem;
    border-bottom: 1px solid #ccc;
  }

  .totals-row {
    height: 1.6rem;
    line-height: 1.6rem;
    padding: 0;
    margin: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: 0.7rem;
    overflow: hidden;
    white-space: nowrap;
    background: #f8fafc;
    border-bottom: 1px solid #ddd;
  }

  .bar-area {
    position: relative;
    flex: 1;
    background: #f9fafb;
  }

  .bar-segment {
    position: absolute;
    left: 15%;
    width: 70%;
    border-radius: 4px;
  }

  .bar-segment.work { background-color: #0077cc; }
  .bar-segment.break { background-color: #00aa00; }
  .bar-segment.lunch { background-color: #222; }
  .bar-segment.split { background-color: #999; }
  .bar-segment.missing { background-color: #cc0000; }

  .blank {
    height: 1.6rem;
  }

  /* Summary Table Layout */
  .summary-grid {
    display: grid;
    grid-template-columns: 60px repeat(14, minmax(60px, 1fr));
    font-size: 0.75rem;
    border-top: 1px solid #e5e7eb;
    margin-top: 0.5rem;
  }

  .label-cell {
    font-weight: bold;
    background: #f3f4f6;
    padding: 0.4rem;
    text-align: right;
    border-bottom: 1px solid #e5e7eb;
  }

  .value-cell {
    padding: 0.4rem;
    text-align: center;
    background: #fff;
    border-left: 1px solid #eee;
    border-bottom: 1px solid #e5e7eb;
    overflow: hidden;
    white-space: nowrap;
    font-size: 0.7rem;
  }

  /* Radio button scaling */
  input[type="radio"] {
    transform: scale(0.8);
  }
</style>

